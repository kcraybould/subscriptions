package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

/*Subscriptions subscriptions

swagger:model Subscriptions
*/
type Subscriptions struct {

	/* hhonors subscription codes
	 */
	HhonorsSubscriptionCodes []string `json:"hhonorsSubscriptionCodes,omitempty"`

	/* marketing subscription codes
	 */
	MarketingSubscriptionCodes []string `json:"marketingSubscriptionCodes,omitempty"`

	/* opt outs

	Required: true
	*/
	OptOuts *SubscriptionOptOuts `json:"optOuts"`
}

// Validate validates this subscriptions
func (m *Subscriptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHhonorsSubscriptionCodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMarketingSubscriptionCodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOptOuts(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Subscriptions) validateHhonorsSubscriptionCodes(formats strfmt.Registry) error {

	if swag.IsZero(m.HhonorsSubscriptionCodes) { // not required
		return nil
	}

	return nil
}

func (m *Subscriptions) validateMarketingSubscriptionCodes(formats strfmt.Registry) error {

	if swag.IsZero(m.MarketingSubscriptionCodes) { // not required
		return nil
	}

	return nil
}

func (m *Subscriptions) validateOptOuts(formats strfmt.Registry) error {

	if err := validate.Required("optOuts", "body", m.OptOuts); err != nil {
		return err
	}

	if m.OptOuts != nil {

		if err := m.OptOuts.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

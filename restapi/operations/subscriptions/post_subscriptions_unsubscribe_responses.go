package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kcraybould/subscriptions/models"
)

/*PostSubscriptionsUnsubscribeNoContent Success.

swagger:response postSubscriptionsUnsubscribeNoContent
*/
type PostSubscriptionsUnsubscribeNoContent struct {
}

// NewPostSubscriptionsUnsubscribeNoContent creates PostSubscriptionsUnsubscribeNoContent with default headers values
func NewPostSubscriptionsUnsubscribeNoContent() *PostSubscriptionsUnsubscribeNoContent {
	return &PostSubscriptionsUnsubscribeNoContent{}
}

// WriteResponse to the client
func (o *PostSubscriptionsUnsubscribeNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

/*PostSubscriptionsUnsubscribeBadRequest Bad Request

swagger:response postSubscriptionsUnsubscribeBadRequest
*/
type PostSubscriptionsUnsubscribeBadRequest struct {

	// In: body
	Payload *models.ErrorDetail `json:"body,omitempty"`
}

// NewPostSubscriptionsUnsubscribeBadRequest creates PostSubscriptionsUnsubscribeBadRequest with default headers values
func NewPostSubscriptionsUnsubscribeBadRequest() *PostSubscriptionsUnsubscribeBadRequest {
	return &PostSubscriptionsUnsubscribeBadRequest{}
}

// WithPayload adds the payload to the post subscriptions unsubscribe bad request response
func (o *PostSubscriptionsUnsubscribeBadRequest) WithPayload(payload *models.ErrorDetail) *PostSubscriptionsUnsubscribeBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post subscriptions unsubscribe bad request response
func (o *PostSubscriptionsUnsubscribeBadRequest) SetPayload(payload *models.ErrorDetail) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSubscriptionsUnsubscribeBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

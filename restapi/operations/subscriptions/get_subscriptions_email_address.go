package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSubscriptionsEmailAddressHandlerFunc turns a function with the right signature into a get subscriptions email address handler
type GetSubscriptionsEmailAddressHandlerFunc func(GetSubscriptionsEmailAddressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSubscriptionsEmailAddressHandlerFunc) Handle(params GetSubscriptionsEmailAddressParams) middleware.Responder {
	return fn(params)
}

// GetSubscriptionsEmailAddressHandler interface for that can handle valid get subscriptions email address params
type GetSubscriptionsEmailAddressHandler interface {
	Handle(GetSubscriptionsEmailAddressParams) middleware.Responder
}

// NewGetSubscriptionsEmailAddress creates a new http.Handler for the get subscriptions email address operation
func NewGetSubscriptionsEmailAddress(ctx *middleware.Context, handler GetSubscriptionsEmailAddressHandler) *GetSubscriptionsEmailAddress {
	return &GetSubscriptionsEmailAddress{Context: ctx, Handler: handler}
}

/*GetSubscriptionsEmailAddress swagger:route GET /subscriptions/{emailAddress} subscriptions getSubscriptionsEmailAddress

Search for an email subscription profile by emailAddress.  This is a composite service.


*/
type GetSubscriptionsEmailAddress struct {
	Context *middleware.Context
	Handler GetSubscriptionsEmailAddressHandler
}

func (o *GetSubscriptionsEmailAddress) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetSubscriptionsEmailAddressParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

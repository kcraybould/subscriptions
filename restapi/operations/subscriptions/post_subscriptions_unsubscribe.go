package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostSubscriptionsUnsubscribeHandlerFunc turns a function with the right signature into a post subscriptions unsubscribe handler
type PostSubscriptionsUnsubscribeHandlerFunc func(PostSubscriptionsUnsubscribeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostSubscriptionsUnsubscribeHandlerFunc) Handle(params PostSubscriptionsUnsubscribeParams) middleware.Responder {
	return fn(params)
}

// PostSubscriptionsUnsubscribeHandler interface for that can handle valid post subscriptions unsubscribe params
type PostSubscriptionsUnsubscribeHandler interface {
	Handle(PostSubscriptionsUnsubscribeParams) middleware.Responder
}

// NewPostSubscriptionsUnsubscribe creates a new http.Handler for the post subscriptions unsubscribe operation
func NewPostSubscriptionsUnsubscribe(ctx *middleware.Context, handler PostSubscriptionsUnsubscribeHandler) *PostSubscriptionsUnsubscribe {
	return &PostSubscriptionsUnsubscribe{Context: ctx, Handler: handler}
}

/*PostSubscriptionsUnsubscribe swagger:route POST /subscriptions/unsubscribe subscriptions postSubscriptionsUnsubscribe

Unsubscribe from email lists (marketing, survey, or all - global)


*/
type PostSubscriptionsUnsubscribe struct {
	Context *middleware.Context
	Handler PostSubscriptionsUnsubscribeHandler
}

func (o *PostSubscriptionsUnsubscribe) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostSubscriptionsUnsubscribeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

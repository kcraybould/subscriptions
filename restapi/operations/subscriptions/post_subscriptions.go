package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostSubscriptionsHandlerFunc turns a function with the right signature into a post subscriptions handler
type PostSubscriptionsHandlerFunc func(PostSubscriptionsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostSubscriptionsHandlerFunc) Handle(params PostSubscriptionsParams) middleware.Responder {
	return fn(params)
}

// PostSubscriptionsHandler interface for that can handle valid post subscriptions params
type PostSubscriptionsHandler interface {
	Handle(PostSubscriptionsParams) middleware.Responder
}

// NewPostSubscriptions creates a new http.Handler for the post subscriptions operation
func NewPostSubscriptions(ctx *middleware.Context, handler PostSubscriptionsHandler) *PostSubscriptions {
	return &PostSubscriptions{Context: ctx, Handler: handler}
}

/*PostSubscriptions swagger:route POST /subscriptions subscriptions postSubscriptions

Create new account with subscription document. This is a composite service.

*/
type PostSubscriptions struct {
	Context *middleware.Context
	Handler PostSubscriptionsHandler
}

func (o *PostSubscriptions) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPostSubscriptionsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
